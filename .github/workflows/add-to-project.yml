name: Add Issue to Project and Set Priority

on:
  issues:
    types: [opened, labeled]

jobs:
  add_to_project:
    runs-on: ubuntu-latest
    steps:
      - name: Extract issue details
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SRIS_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueId = issue.node_id;
            const labels = issue.labels.map(label => label.name);

            // Change these according to your project
            const org = "jaganpaz"; // org/user that owns the project
            const projectNumber = 3; // Your GitHub project number
            const priorityFieldName = "Priority"; // The name of the priority field

            // Find the label starting with "priority:"
            const priorityLabel = labels.find(label => label.toLowerCase().startsWith("priority:"));
            if (!priorityLabel) {
              console.log("No priority label found, skipping update.");
              return;
            }

            const priorityValue = priorityLabel.split(":")[1].trim();

            // 1. Get project ID
            const { data: projects } = await github.graphql(`
              query($org: String!) {
                organization(login: $org) {
                  projectsV2(first: 10) {
                    nodes {
                      id
                      title
                      number
                    }
                  }
                }
              }
            `, { org });

            const project = projects.organization.projectsV2.nodes.find(p => p.number === projectNumber);
            if (!project) {
              throw new Error("Project not found");
            }

            const projectId = project.id;

            // 2. Add issue to project
            const addItem = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `, {
              projectId,
              contentId: issueId,
            });

            const itemId = addItem.addProjectV2ItemById.item.id;

            // 3. Get project fields
            const { data: fieldsData } = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const fields = fieldsData.node.fields.nodes;
            const priorityField = fields.find(f => f.name === priorityFieldName);

            if (!priorityField || !priorityField.options) {
              throw new Error("Priority field not found or is not a single-select field");
            }

            const matchedOption = priorityField.options.find(opt => opt.name.toLowerCase() === priorityValue.toLowerCase());

            if (!matchedOption) {
              console.log(`No matching option for priority: ${priorityValue}`);
              return;
            }

            // 4. Set priority
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              projectId,
              itemId,
              fieldId: priorityField.id,
              optionId: matchedOption.id,
            });

            console.log(`Issue added to project and priority set to ${priorityValue}`);
